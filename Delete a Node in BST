
import java.util.*;
public class Main
{
	static Scanner sc= new Scanner(System.in);
    class Node{
        int data;
        Node left;Node right;
        Node(int data){
            this.data=data;
            right=left=null;
        }
    }
    Node root;
    void insertion(int val){
        root=insertdata(root,val);
    }
    Node insertdata(Node root,int val){
        if(root==null){
            root=new Node(val);
            return root;
        }
        if(val<root.data){
            root.left=insertdata(root.left,val);
        }
        else if(val>root.data){
            root.right=insertdata(root.right,val);
        }
        return root;
    }
    void inorder(Node root){
        if(root==null){
            return;
        }
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);
    }
    Node deleteNode(Node root,int key){
        if(root==null)
        return root;
        
        if(key<root.data){
            root.left=deleteNode(root.left,key);
        }
        else if(key>root.data){
            root.right=deleteNode(root.right,key);
        }
        else{
            if(root.left==null){
                return root.right;
            }
            else if(root.right==null){
                return root.left;
            }
            root.data=minvalue(root.right);
            root.right=deleteNode(root.right,root.data);
        }
        return root;
    }
    int minvalue(Node root){
        int minv=root.data;
        while(root.left!=null){
            minv=root.left.data;
            root=root.left;
        }
        return minv;
    }
	public static void main(String[] args) {
	    Main tree = new Main();
	    tree.insertion(50);
        tree.insertion(30);
        tree.insertion(20);
        tree.insertion(40);
        tree.insertion(70);
        tree.insertion(60);
        tree.insertion(80);
        tree.inorder(tree.root);
        System.out.println();
        tree.root=tree.deleteNode(tree.root,40);
        tree.inorder(tree.root);
        
	}
}
